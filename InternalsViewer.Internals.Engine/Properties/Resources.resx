<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Sql_Metadata_AllocationUnits" xml:space="preserve">
    <value>SELECT iau.allocation_unit_id               AS AllocationUnitId
      ,o.object_id                          AS ObjectId
	  ,iau.first_iam_page                   AS FirstIamPage
      ,iau.root_page                        AS RootPage
      ,iau.first_page                       AS FirstPage
      ,s.name                               AS SchemaName
	  ,o.name                               AS TableName
      ,i.name                               AS IndexName
	  ,is_ms_shipped                        AS IsSystem
      ,p.index_id                           AS IndexId
      ,i.type                               AS IndexType
      ,iau.type                             AS AllocationUnitType
	  ,CASE iau.type
			WHEN 1 THEN 'Row Data'
			WHEN 2 THEN 'LOB Data'
			WHEN 3 THEN 'Row Overflow Data'
	   END                                  AS AllocationUnitTypeDescription
      ,iau.used_pages                       AS UsedPages
      ,iau.total_pages                      AS TotalPages
FROM   sys.all_objects o
	   INNER JOIN sys.schemas s    ON o.schema_id = s.schema_id 
	   INNER JOIN sys.partitions p ON p.object_id = o.object_id
       INNER JOIN sys.indexes i    ON i.object_id = o.object_id 
                                       AND i.index_id = p.index_id
	   INNER JOIN sys.system_internals_allocation_units iau ON iau.container_id = p.partition_id
ORDER BY is_ms_shipped DESC
        ,s.name        ASC
        ,o.name        ASC</value>
  </data>
  <data name="Sql_Metadata_CompatabilityLevel" xml:space="preserve">
    <value>SELECT compatibility_level FROM sys.databases WHERE name = 'master'</value>
  </data>
  <data name="Sql_Metadata_Database" xml:space="preserve">
    <value>SELECT d.database_id                       AS DatabaseId
      ,df.database_id                      AS DatabaseId
      ,d.name                              AS Name
      ,d.compatibility_level               AS CompatabilityLevel
      ,df.file_id                          AS FileId
      ,df.type                             AS FileType
      ,fg.name                             AS [FileGroup]
      ,df.name                             AS [FilePath]
      ,physical_name                       AS PhysicalName
      ,size                                AS Size
      ,fsu.total_page_count / 8            AS TotalExtents
      ,fsu.allocated_extent_page_count / 8 AS UsedExtents
FROM   sys.databases d
       INNER JOIN sys.master_files df            ON df.database_id = d.database_id
       INNER JOIN sys.filegroups fg              ON df.data_space_id = fg.data_space_id
       INNER JOIN sys.dm_db_file_space_usage fsu ON df.file_id       = fsu.file_id AND fsu.database_id = d.database_id
WHERE  df.[type] = 0</value>
  </data>
  <data name="Sql_Metadata_FileSize" xml:space="preserve">
    <value>SELECT size FROM sys.database_files WHERE file_id = @FileId</value>
  </data>
  <data name="Sql_DatabasePageReader_Page" xml:space="preserve">
    <value>DBCC PAGE({0}, {1}, {2}, {3}) WITH TABLERESULTS</value>
  </data>
  <data name="Sql_Metadata_Databases" xml:space="preserve">
    <value>SELECT name FROM sys.databases ORDER BY name ASC</value>
  </data>
</root>